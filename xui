#!/usr/bin/env python
#
# xui


import xmmsclient
import sys
import os
import urwid
import urwid.raw_display


class XmmsError(Exception):
    def __init__(self, msg):
        Exception.__init__(self, msg)


class Client(object):
    """
    XMMS client wrapper
    """
    def __init__(self):
        self.xmms = None

    def connect(self):
        self.xmms = xmmsclient.XMMS("xui")
        try:
            self.xmms.connect(os.getenv("XMMS_PATH"))
        except IOError, e:
            raise XmmsError(e)

    def _sync(self, r):
        r.wait()
        if r.iserror():
            raise XmmsError(r.get_error())
        return r.value()

    def current(self):
        return self._sync(self.xmms.playback_current_id())

    def medialib_info(self, track):
        return self._sync(self.xmms.medialib_get_info(track))

    def ls(self):
        return self._sync(self.xmms.playlist_list_entries())

    def play(self):
        return self._sync(self.xmms.playback_start())

    def stop(self):
        return self._sync(self.xmms.playback_stop())

    def pause(self):
        return self._sync(self.xmms.playback_pause())

    def tickle(self):
        return self._sync(self.xmms.playback_tickle())

    def set_next(self, index):
        return self._sync(self.xmms.playlist_set_next(index))

    def status(self):
        return self._sync(self.xmms.playback_status())

    def stopped(self):
        return self.status() == 0

    def playing(self):
        return self.status() == 1

    def paused(self):
        return self.status() == 2

    def playing_info(self):
        if self.playing():
            info = self.medialib_info(self.current())
            return u"now playing: %s - %s" % (info.get('artist', ''), info.get('title', ''))
        else:
            return u"not playing."

    def entry_info(self, name, pos):
        lst = self._sync(self.xmms.playlist_list_entries(name))
        return self.medialib_info(lst[pos])

    def jump(self, trackid):
        pl = self.ls()
        for n, tid in enumerate(pl):
            if trackid == tid:
                return self.set_next(n)
        return False

    def set_on_pos_changed(self, cb):
        self.xmms.broadcast_playlist_current_pos(cb)


class Xui(object):
    """
    Curses UI to the XMMS client
    """
    def __init__(self, client):
        self.client = client

    def unhandled(self, key):
        if key == 'p':
            if self.client.playing():
                self.client.pause()
            else:
                self.client.play()
        elif key == 's':
            self.client.stop()
        elif key == 'esc' or key == 'q':
            raise urwid.ExitMainLoop()

    def on_pos_changed(self, v):
        x = v.value()
        pos = x[u'position']
        name = x[u'name']
        info = self.client.entry_info(name, pos)
        self.header.set_text(u'Now playing: %s - %s' %
                             (info.get('artist', ''), info.get('title', '')))

    def build_ui(self):
        self.listbox_content = []

        playlist = self.client.ls()
        for item in playlist:
            info = self.client.medialib_info(item)
            desc = u'%s - %s' % (info.get('artist', ''),
                                 info.get('title', ''))
            btn = urwid.Button(desc)
            urwid.connect_signal(btn, 'click', self.on_click, [item, info])
            self.listbox_content.append(urwid.AttrMap(btn, None, focus_map='focus'))

        self.header = urwid.AttrWrap(urwid.Text(self.client.playing_info()), 'header')
        self.listbox = urwid.ListBox(urwid.SimpleListWalker(self.listbox_content))
        self.frame = urwid.Frame(urwid.AttrWrap(self.listbox, 'body'), header=self.header)
        self.palette = [
            ('body', 'light gray', 'black', 'standout'),
            ('focus', 'white', 'dark red'),
            ('header', 'light gray', 'dark gray', 'bold')
        ]
        self.screen = urwid.raw_display.Screen()

        self.client.set_on_pos_changed(self.on_pos_changed)

    def on_click(self, btn, choice):
        song_id = choice[0]
        self.client.jump(song_id)
        if not self.client.playing():
            self.client.play()
        self.client.tickle()

    def display(self):
        self.build_ui()
        loop = urwid.MainLoop(self.frame,
                              self.palette,
                              self.screen,
                              unhandled_input=self.unhandled)
        loop.run()


def main():
    try:
        client = Client()
        client.connect()

        xui = Xui(client)
        xui.display()
    except XmmsError, e:
        print >> sys.stderr, "Error: %s" % (e)
        sys.exit(1)

    #now_playing = xui.current()
    #if now_playing == 0:
    #    print "(nothing playing)"
    #    return
    #info = xui.medialib_info(now_playing)
    #print "%s - %s" % (info.get('artist', ''), info.get('title', ''))


if __name__ == "__main__":
    main()
