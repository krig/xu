#!/usr/bin/env python
"""
Album art display web service:

Frontend is a javascript program which displays album art,
when the album art is clicked, a page is shown with more information
and options to play or enqueue the given album or individual song.
The backend connects to xmms2 both to find music and to play music.
"""

import os
import logging
import re
import urllib
import json
import xmmsclient as xm
import xmmsclient.collections as xc
from threading import Thread
from flask import Flask, render_template, send_file, request, redirect
app = Flask(__name__)
app.config.from_object(__name__)

BINDATA = os.path.expanduser('~/.config/xmms2/bindata')
LOGFILE = os.path.expanduser('~/.cache/xmms2/xub.log')
FIELDS = ["artist", "compilation", "album", "picture_front", 'picture_front_mime', 'lmod']

logging.basicConfig(filename=LOGFILE, filemode='w', level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s: %(message)s', datefmt='%H:%M:%S')

log = logging.getLogger(__name__)


class Album(object):
    """
    Represents an album by:
    index
    album
    picture
    mime
    lmod
    """
    __slots__ = ('idx', 'artist', 'album', 'picture', 'mime', 'lmod')

    def __init__(self, idx, artist, album, pic, mime, lmod):
        self.idx = idx
        self.artist = artist
        self.album = album
        self.picture = pic
        self.mime = mime
        self.lmod = lmod

    def __str__(self):
        return self.album.encode('utf-8')


class Xmms1(object):
    def __init__(self, albums):
        self.xmms = xm.XMMSSync("xub1")
        self.xmms.connect(os.getenv("XMMS_PATH"))
        self.albums = albums

    def play_album(self, index, enqueue=False):
        print "index:", index
        print "albums:", len(self.albums)
        if int(index) < len(self.albums):
            try:
                album = self.albums[index]
                ids = self.xmms.coll_query_ids(
                    xc.Match(xc.Universe(),
                             field="album", value=album.album))
                if not enqueue:
                    self.xmms.playlist_clear()
                self.xmms.playlist_add_collection(xc.IDList(ids))
                if not enqueue:
                    self.xmms.playback_stop()
                    self.xmms.playlist_set_next(0)
                    self.xmms.playback_start()
            except Exception, e:
                log.exception(e)

    def infos_for_album(self, album):
        return self.xmms.coll_query_infos(
            xc.Match(xc.Universe(),
                     field="album",
                     value=album.album),
            ["artist", "compilation", "album", "tracknr", "id", "url"])


class Xmms2(Thread):
    def __init__(self):
        Thread.__init__(self, name="Xmms2")
        self.xmms = xm.XMMS("xub0")
        self.albums = []

    def _new_album(self, album):
        if 'album' in album and album['album'] is not None:
            log.debug("New album: %s", album)
            album_obj = Album(len(self.albums),
                              album['artist'] or album['compilation'],
                              album['album'] or album['compilation'],
                              album['picture_front'],
                              album['picture_front_mime'],
                              album['lmod'] or 0)
            self.albums.append(album_obj)
        else:
            log.error("Broken album: %s" % (repr(album)))

    def on_albumlist(self, albums_data):
        if albums_data.is_error():
            log.error("XMMS2 error: %s", albums_data.get_error())
            return
        albums = sorted(albums_data.value(), key=lambda a: a.get('artist') or a.get('compilation'))
        for album in albums:
            self._new_album(album)

    def on_albumlist_changed(self, albums_data):
        if albums_data.is_error():
            log.error("XMMS2 error: %s", albums_data.get_error())
            return
        for album in albums_data.value():
            for album2 in self.albums:
                if album2.album == album['album']:
                    album2.picture = album['picture_front']
                    album2.mime = album['picture_front_mime']
                    album2.lmod = album['lmod']
                    break
            else:
                self._new_album(album)

    def on_added(self, album_data):
        if album_data.is_error():
            log.error("XMMS2 error: %s", album_data.get_error())
            return
        trackid = album_data.value()
        self.xmms.coll_query_infos(xc.Match(xc.Universe(), field="id", value=unicode(trackid)),
                                   fields=FIELDS,
                                   groupby=["album"],
                                   cb=self.on_albumlist_changed)

    def on_changed(self, album_data):
        if album_data.is_error():
            log.error("XMMS2 error: %s", album_data.get_error())
            return
        trackid = album_data.value()
        self.xmms.coll_query_infos(xc.Match(xc.Universe(), field="id", value=unicode(trackid)),
                                   fields=FIELDS,
                                   groupby=["album"],
                                   cb=self.on_albumlist_changed)

    def run(self):
        self.xmms.connect(os.getenv("XMMS_PATH"))
        self.xmms.broadcast_medialib_entry_added(cb=self.on_added)
        self.xmms.broadcast_medialib_entry_changed(cb=self.on_changed)
        self.xmms.coll_query_infos(xc.Universe(),
                                   fields=FIELDS,
                                   groupby=["album"],
                                   cb=self.on_albumlist)
        self.xmms.loop()


xmms2 = Xmms2()
xmms1 = Xmms1(xmms2.albums)


@app.route("/")
def albums():
    query = request.args.get('s', 'all albums')
    return render_template("index.html",
                           title="XUB: %s" % (query),
                           albums=xmms2.albums)


@app.route("/query/<query>")
def page_query(query):
    return render_template("index.html",
                           title="XUB: " + query,
                           albums=xmms2.albums)


@app.route("/playlist")
def playlist_page():
    return render_template("playlist.html",
                           title="XUB: playlist")


@app.route("/api/enqueue/<int:albumidx>")
def enqueue(albumidx):
    xmms1.play_album(albumidx, enqueue=True)
    return ""


@app.route("/api/play/<int:albumidx>")
def play(albumidx):
    xmms1.play_album(albumidx)
    return ""


@app.route("/fonts/<font>")
def fonts(font):
    "route as staticish"
    if '/' in font or '..' in font:
        return ""
    mimes = {
        '.woff': 'application/x-font-woff',
        '.ttf': 'font/truetype',
        '.otf': 'font/opentype',
        '.svg': 'image/svg+xml',
        '.eot': 'application/vnd.ms-fontobject'
    }
    mime = mimes.get(os.path.splitext(font)[1].lower(), 'application/binary')
    return send_file(os.path.join("fonts", font), mimetype=mime)


def code(v):
    if isinstance(v, unicode):
        return v.encode('utf-8')
    return v


def clean(mediainfo):
    return dict((code(key[1]), code(value)) for key, value in mediainfo.iteritems())


@app.route("/api/query/artists/<query>")
def api_query_artists(query):
    def qartist(album):
        if album.artist is None:
            return "unknown artist"
        return album.artist.lower()
    try:
        query = query.lower()
        results = [album.idx for album in xmms2.albums if query in qartist(album)]
        return json.dumps({"result": results})
    except Exception, e:
        log.exception(e)
        return json.dumps({"error": str(e)})


@app.route("/api/query/albums/<query>")
def api_query_albums(query):
    def qalbum(album):
        if album.album is None:
            return "unknown album"
        return album.album.lower()
    try:
        query = query.lower()
        results = [album.idx for album in xmms2.albums if query in qalbum(album)]
        return json.dumps({"result": results})
    except Exception, e:
        log.exception(e)
        return json.dumps({"error": str(e)})


# return all albums sorted by album name
@app.route("/api/query/by_album")
def api_query_by_album():
    try:
        results = [album.idx for album in sorted(xmms2.albums, key=lambda a: a.album)]
        return json.dumps({"result": results})
    except Exception, e:
        log.exception(e)
        return json.dumps({"error": str(e)})


# return all albums sorted by lmod
@app.route("/api/query/by_lmod")
def api_query_by_lmod():
    try:
        results = [album.idx for album in sorted(xmms2.albums, key=lambda a: a.lmod, reverse=True)]
        return json.dumps({"result": results})
    except Exception, e:
        log.exception(e)
        return json.dumps({"error": str(e)})


@app.route("/api/current")
def nowplaying():
    try:
        now = xmms1.xmms.playback_current_id()
        info = xmms1.xmms.medialib_get_info(now)
        status = xmms1.xmms.playback_status()
        playtime = xmms1.xmms.playback_playtime()
        ret = clean(info)
        ret[u'status'] = status
        ret[u'playtime'] = playtime
        return json.dumps(ret)
    except Exception, e:
        log.exception(e)
        return json.dumps({"error": str(e)})


@app.route("/api/playback/<status>")
def api_playback(status):
    if status == "toggle":
        if xmms1.xmms.playback_status() == 1:
            xmms1.xmms.playback_pause()
        else:
            xmms1.xmms.playback_start()
    elif status == "stop":
        xmms1.xmms.playback_stop()
    return ""


@app.route("/api/playlist")
def playlist():
    try:
        pos = xmms1.xmms.playlist_current_pos()
    except Exception, e:
        log.exception(e)
        pos = {'position': -1}
    try:
        entries = xmms1.xmms.playlist_list_entries()
        pos['playlist'] = [clean(xmms1.xmms.medialib_get_info(entry)) for entry in entries]
        return json.dumps(pos)
    except Exception, e:
        log.exception(e)
        return json.dumps({"error": str(e)})


@app.route("/api/album/<int:index>")
def album(index):
    try:
        if index < len(xmms2.albums):
            album = xmms2.albums[index]
            infos = xmms1.infos_for_album(album)

            return json.dumps({'album': album.album,
                               'index': album.idx,
                               'tracks': infos})
    except Exception, e:
        log.exception(e)
    return json.dumps({'error': "Haven't loaded %s yet" % (index)})


@app.route("/api/playlist-move/<int:f>/<int:t>")
def api_playlistmove(f, t):
    try:
        xmms1.xmms.playlist_move(f, t)
        return ""
    except Exception, e:
        log.exception(e)


@app.route("/api/jump/<int:index>")
def api_jump(index):
    try:
        xmms1.xmms.playlist_set_next(index)
        if xmms1.xmms.playback_status() != 1:
            xmms1.xmms.playback_start()
        xmms1.xmms.playback_tickle()
        return ""
    except Exception, e:
        log.exception(e)


@app.route("/restart")
def api_restart():
    global xmms2
    try:
        xmms2.xmms.exit_loop()
        xmms2 = Xmms2()
        xmms2.start()
        xmms1.albums = xmms2.albums
        return redirect("/", code=302)
    except Exception, e:
        log.exception(e)


@app.route("/api/num_albums")
def num_albums():
    return json.dumps({"num_albums": len(xmms2.albums)})


@app.route("/api/clear")
def api_clear():
    try:
        xmms1.xmms.playlist_clear()
        return ""
    except Exception, e:
        log.exception(e)


@app.route("/api/arthash/<hashval>")
def api_arthash(hashval):
    if re.match(r'^[0-9a-f]+$', hashval):
        data = os.path.join(BINDATA, hashval)
    else:
        data = 'static/none.jpg'
    return send_file(data)


def download_art(album):
    """
    All this does is check if there's art in
    folder, if so it updates the xmms2 medialib
    """
    try:
        mimes = {'.jpg': 'image/jpeg',
                 '.jpeg': 'image/jpeg',
                 '.png': 'image/png'}
        infos = xmms1.infos_for_album(album)
        if len(infos) == 0:
            log.debug("No tracks found in album")
            return None, None
        if 'url' not in infos[0] or infos[0]['url'] is None:
            log.debug("no source file url in first track: %s", album.album)
            return None, None
        if not infos[0]['url'].startswith('file://'):
            log.debug("URL is not a file")
            return None, None
        url = urllib.unquote_plus(infos[0]['url'][7:].encode('utf-8'))
        log.debug("URL: %s", url)
        for f in os.listdir(os.path.dirname(url)):
            t = os.path.splitext(f)[1].lower()
            if t in ('.jpg', '.jpeg', '.png'):
                mime = mimes[t]
                cover = xmms1.xmms.bindata_add(open(os.path.join(os.path.dirname(url), f)).read())
                log.debug("Found cover: %s saved as bindata %s / %s", f, cover, mime)
                break
        else:
            return None, None
        for info in infos:
            xmms1.xmms.medialib_property_set(info['id'], "picture_front", cover)
            xmms1.xmms.medialib_property_set(info['id'], "picture_front_mime", mime)
        return cover, mime
    except Exception, e:
        log.exception(e)
        return None, None


@app.route("/api/art/<int:index>")
def albumart(index):
    try:
        index = int(index)
        if index >= len(xmms2.albums):
            raise ValueError("index out of range: %s" % (index))
        album = xmms2.albums[index]
        if not album.picture:
            album.picture, album.mime = download_art(album)
            if not album.picture:
                raise ValueError("album has no art: %s %s" % (index, album.album.encode('utf-8')))
        data = os.path.join(BINDATA, album.picture)
        mime = album.mime
        return send_file(data, mimetype=mime)
    except Exception, e:
        log.exception(e)
        data = 'static/none.jpg'
        mime = 'image/jpeg'
        return send_file(data, mimetype=mime)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='XMMS2 Web UI')
    parser.add_argument('--host', dest='host', action='store',
                        default='127.0.0.1',
                        help='IP address to serve on')
    parser.add_argument('--port', dest='port', action='store',
                        default=5000, type=int,
                        help='Port to serve on')
    parser.add_argument('--debug', dest='debug', action='store_true',
                        help='Enable debugging')

    args = parser.parse_args()

    xmms2.start()
    app.run(host=args.host, port=args.port, debug=args.debug)
    xmms2.xmms.exit_loop()
