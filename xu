#!/usr/bin/env python
#
# xu


import xmmsclient
import xmmsclient.glib
import xmmsclient.collections as coll
import sys
import os
import urwid
import urwid.raw_display
import logging as log
import subprocess

from urwid import AttrMap, ListBox, Frame
from urwid import Text, Padding, WidgetWrap, Columns, SimpleFocusListWalker

PROMPT = u">>"


if '-d' in sys.argv:
    log.basicConfig(filename='xu.log', level=log.DEBUG)
else:
    log.disable(log.ERROR)


class XmmsError(Exception):
    def __init__(self, msg):
        Exception.__init__(self, msg)


class Client(object):
    """
    XMMS client wrapper
    """
    def __init__(self):
        self.xmms = None
        self.conn = None

    def connect(self, retry=True):
        self.xmms = xmmsclient.XMMS("xu0")
        try:
            self.xmms.connect(os.getenv("XMMS_PATH"))
        except IOError, e:
            if retry:
                subprocess.call(["xmms2-launcher"])
                return self.connect(retry=False)
            raise XmmsError(e)
        self.conn = xmmsclient.glib.GLibConnector(self.xmms)

    def _sync(self, r):
        r.wait()
        if r.iserror():
            v = r.value()
            if isinstance(v, basestring):
                raise XmmsError(v)
            elif isinstance(v, xmmsclient.XMMSValue):
                raise XmmsError(v.get_error())
            else:
                raise XmmsError(repr(v))
        return r.value()

    def current_id(self):
        return self._sync(self.xmms.playback_current_id())

    def current_pos(self):
        pos = self._sync(self.xmms.playlist_current_pos())
        if pos:
            return pos[u'position']
        return None

    def medialib_info(self, track):
        log.debug("Get info: " + repr(track))
        return self._sync(self.xmms.medialib_get_info(track))

    def bindata_retrieve(self, hashval):
        log.debug("Bindata retrieve: " + repr(hashval))
        return self._sync(self.xmms.bindata_retrieve(hashval))

    def ls(self):
        return self._sync(self.xmms.playlist_list_entries())

    def play(self):
        return self._sync(self.xmms.playback_start())

    def stop(self):
        return self._sync(self.xmms.playback_stop())

    def pause(self):
        return self._sync(self.xmms.playback_pause())

    def tickle(self):
        return self._sync(self.xmms.playback_tickle())

    def set_next(self, index):
        return self._sync(self.xmms.playlist_set_next(index))

    def status(self):
        return self._sync(self.xmms.playback_status())

    def stopped(self):
        return self.status() == 0

    def playing(self):
        return self.status() == 1

    def paused(self):
        return self.status() == 2

    def playing_info(self):
        if self.playing():
            info = self.medialib_info(self.current_id())
            if 'artist' in info or 'title' in info:
                return u"%s %s - %s" % (PROMPT, info.get('artist', ''), info.get('title', ''))
            else:
                return u"%s %s" % (PROMPT, cleanurl(info.get('url', '')))
        else:
            return PROMPT

    def entry_info(self, name, pos):
        lst = self._sync(self.xmms.playlist_list_entries(name))
        return self.medialib_info(lst[pos])

    def playtime(self):
        return self._sync(self.xmms.playback_playtime())

    def match(self, artist=None, album=None, title=None):
        if artist:
            return coll.Match(field='artist', value=artist)
        elif album:
            return coll.Match(field='album', value=album)
        elif title:
            return coll.Match(field='title', value=title)
        else:
            return None

    def query(self, coll, order):
        '''coll is a collection object
        order is a string describing how to sort the result
        returns all matching ids

        client.query(client.match(album="foo"))
        '''
        return self._sync(self.xmms.coll_query_ids(coll, order.split()))

    def add_collection(self, coll, order):
        '''coll is a collection object
        order is a string describing how to sort the result
        adds the collection object to the playlist
        '''
        return self._sync(self.xmms.playlist_add_collection(coll, order.split()))

    def jump(self, trackid):
        pl = self.ls()
        for n, tid in enumerate(pl):
            if trackid == tid:
                return self.set_next(n)
        return False

    def set_on_pos_changed(self, cb):
        self.xmms.broadcast_playlist_current_pos(cb)

    def set_on_playlist_changed(self, cb):
        self.xmms.broadcast_playlist_changed(cb)

    def set_on_playback_current_id(self, cb):
        self.xmms.broadcast_playback_current_id(cb)

    def set_on_playback_status(self, cb):
        self.xmms.broadcast_playback_status(cb)


class EntryWidget(WidgetWrap):
    def __init__(self, id, pln, artist, title):
        self.id = id
        self.song_pln = pln
        self.song_artist = artist
        self.song_title = title
        self.content = '%s - %s' % (artist, title)
        self.item = [
            ('fixed', 5, Padding(AttrMap(Text(pln, align='right'), 'body', 'focus'),
                                 align='right', right=1)),
            AttrMap(Text(self.content), 'body', 'focus'),
        ]
        w = Columns(self.item)
        super(EntryWidget, self).__init__(w)

    def set_current(self, is_current):
        if is_current:
            self.item[1].set_attr_map({None: 'highlight'})
        else:
            self.item[1].set_attr_map({None: 'body'})

    def selectable(self):
        return True

    def keypress(self, size, key):
        return key


class XuiProgressBar(urwid.ProgressBar):
    def __init__(self):
        super(XuiProgressBar, self).__init__('progress_off', 'progress_on', 0, 100)

    def get_text(self):
        return ""


class ArtCanvas(urwid.Canvas):
    cacheable = False

    def __init__(self, data, size):
        urwid.Canvas.__init__(self)
        self._data = data
        self.cursor = None
        self._artsize = size

    def rows(self):
        return self._artsize[1]

    def cols(self):
        return self._artsize[0]

    def translated_coords(self, dx, dy):
        return None

    def content(self, trim_left=0, trim_top=0, cols=None, rows=None, attr_map=None):
        """
        Return the canvas content as a list of rows where each row
        is a list of (attr, cs, text) tuples.

        trim_left, trim_top, cols, rows may be set by
        CompositeCanvas when rendering a partially obscured
        canvas.
        """
        maxcol, maxrow = self.cols(), self.rows()
        if not cols:
            cols = maxcol - trim_left
        if not rows:
            rows = maxrow - trim_top
        for row in self._data:
            yield row


class AlbumArt(urwid.Widget):
    _sizing = frozenset(['flow'])

    def __init__(self):
        urwid.Widget.__init__(self)
        self._art_size = (12, 8)
        self._art_data = None
        self._art_content = None

    def render(self, size, focus=False):
        if self._art_size != size or not self._art_content:
            self._art_size = size
            self._art_rebuild()
        ret = ArtCanvas(self._art_content, self._art_size)
        return ret

    def set_data(self, data):
        self._art_data = data
        self._art_rebuild()

    def clear(self):
        self._art_data = None
        self._art_rebuild()

    def _art_rebuild(self):
        from cStringIO import StringIO
        from PIL import Image
        size = self._art_size
        if not self._art_data:
            self._art_content = [row for row in self._blank_rows(size)]
            return

        rendersize = (size[0], size[0]/2)

        imgdata = self._art_data
        im = Image.open(StringIO(imgdata))
        im = im.resize(rendersize, Image.ANTIALIAS)
        rows = []
        for y in xrange(0, im.size[1]):
            col = []
            for x in xrange(0, im.size[0]):
                clr = hexrgb(RGB(im.getpixel((x, y))))
                attr = urwid.AttrSpec(clr, clr)
                col.append((attr, None, '#'))
            rows.append(col)
        for r in self._blank_rows((size[0], size[1] - im.size[1])):
            rows.append(r)
        self._art_content = rows

    def _blank_rows(self, size):
        defattr = urwid.AttrSpec('default', 'default')
        for y in xrange(0, size[1]):
            yield [(defattr, None, ' ') for x in xrange(0, size[0])]


class Xui(object):
    """
    Curses UI to the XMMS client
    """
    def __init__(self, client):
        self.client = client
        self.loop = None
        self.rebuilding = False
        self.progress_enabled = False
        self.current_id = None
        self.current_info = None
        self.current_pos = None

    def unhandled(self, key):
        if isinstance(key, tuple):
            return
        key = key.lower()
        if key == 'p':
            self.toggle_playing()
        elif key == 's':
            self.client.stop()
        elif key == 'a':
            self.show_search_ui()
        elif key == 'enter':
            focus = self.listbox.get_focus()[0].id
            self.client.jump(focus)
            if not self.client.playing():
                self.client.play()
            self.client.tickle()
        elif key == 'esc' or key == 'q':
            raise urwid.ExitMainLoop()

    def toggle_playing(self):
        if self.client.playing():
            self.client.pause()
        else:
            self.client.play()

    def show_search_ui(self):
        pass

    def on_pos_changed(self, v):
        x = v.value()
        pos = x[u'position']
        self.current_pos = pos
        for idx, w in enumerate(self.listbox.body):
            is_focus = idx == pos
            w.set_current(is_focus)
        self.listbox.set_focus(pos)

    def on_playlist_changed(self, v):
        def rebuilder(loop, data):
            if self.rebuild_list():
                self.loop.draw_screen()
        if not self.rebuilding:
            self.rebuilding = True
            self.loop.set_alarm_in(1.0, rebuilder)

    def on_playback_current_id(self, v):
        if not v:
            self.current_id = None
        else:
            self.current_id = v.value()
        if self.current_id:
            self.current_info = self.client.medialib_info(self.current_id)
            log.debug("current_id: " + str(self.current_id))
            log.debug("current info: " + str(self.current_info))
            self.update_album_art(self.current_info)

    def on_playback_status(self, v):
        status = v.value()
        log.debug("playback_status: %s" % (status))
        if status == 0:  # stopped
            self.current_id = None
            self.current_info = None
            self.set_progress(0, 100)

    def update_album_art(self, info):
        """yep.. ascii album art \m/"""
        imghash = info.get('picture_front')
        if imghash:
            data = self.client.bindata_retrieve(imghash)
            self.albumart.set_data(data)
        else:
            self.albumart.clear()

    def rebuild_list(self):
        if self.listbox.focus:
            focus = self.listbox.focus_position
        else:
            focus = None
        retries = 3
        retry = 0
        try:
            while retry < retries:
                try:
                    while len(self.listbox.body):
                        self.listbox.body.pop()
                    playlist = self.client.ls()
                    self.current_id = self.client.current_id()
                    self.current_pos = self.client.current_pos()
                    log.debug("Rebuilding: %s, %s, %s",
                              self.current_id,
                              self.current_pos,
                              playlist)
                    for idx, item in enumerate(playlist):
                        info = self.client.medialib_info(item)
                        artist = info.get('artist', info.get('album', ''))
                        title = info.get('title', cleanurl(info.get('url', info.get('album', ''))))
                        w = EntryWidget(item, str(idx+1), artist, title)
                        if idx == self.current_pos:
                            w.set_current(True)
                        self.listbox.body.append(w)
                    if focus:
                        self.listbox.set_focus(focus)
                    log.debug("Rebuilt list! %d items" % (len(self.listbox.body)))
                    return True
                except XmmsError, e:
                    log.exception(e)
                retry += 1
        finally:
            self.rebuilding = False

    def on_click(self, btn, choice):
        song_id = choice[0]
        self.client.jump(song_id)
        if not self.client.playing():
            self.client.play()
        self.client.tickle()

    def set_progress(self, amt):
        ''' set progress in percentages'''
        self.header.set_completion(amt)

    def refresh_current_id(self):
        if self.current_id:
            return self.current_id
        self.current_id = self.client.current_id()
        if self.current_id:
            self.current_info = self.client.medialib_info(self.current_id)
            log.debug("current_id: " + str(self.current_id))
            log.debug("current info: " + str(self.current_info))
        return self.current_id

    PROGRESS_REFRESH_RATE = 2

    def start_progress(self):
        def update_progress(loop, obj):
            curr = obj.refresh_current_id()
            if curr:
                playtime = obj.client.playtime()
                duration = obj.current_info.get('duration', 0)
                #log.debug("update progress for %s: %s / %s" % (curr, playtime, duration))
                if duration > 0:
                    obj.set_progress(int(float(playtime) / float(duration) * 100.0))
                else:
                    obj.set_progress(0)
            if obj.progress_enabled:
                loop.set_alarm_in(obj.PROGRESS_REFRESH_RATE, update_progress, obj)
        self.progress_enabled = True
        update_progress(self.loop, self)

    def stop_progress(self):
        self.progress_enabled = False

    def display(self):
        self.palette = [
            ('body', 'dark cyan', ''),
            ('focus', 'white', 'black'),
            ('highlight', 'dark red', ''),
            ('header', 'light gray', '', 'bold'),
            ('progress_off', 'dark gray', '', ''),
            ('progress_on', 'dark gray', 'black', ''),
        ]
        self.screen = urwid.raw_display.Screen()
        self.header = XuiProgressBar()
        self.listbox = ListBox(SimpleFocusListWalker([]))
        self.albumart = AlbumArt()
        self.rebuild_list()
        bodysplit = AttrMap(Columns([self.listbox, (24, self.albumart)],
                                    dividechars=1, min_width=24), 'body')
        self.frame = Frame(bodysplit, header=self.header)
        self.client.set_on_pos_changed(self.on_pos_changed)
        self.client.set_on_playlist_changed(self.on_playlist_changed)
        self.client.set_on_playback_current_id(self.on_playback_current_id)
        self.client.set_on_playback_status(self.on_playback_status)
        self.client.xmms.playback_current_id(cb=self.on_playback_current_id)
        self.client.xmms.playlist_current_pos(cb=self.on_pos_changed)
        log.debug("Starting mainloop...")
        self.loop = urwid.MainLoop(self.frame,
                                   self.palette,
                                   self.screen,
                                   unhandled_input=self.unhandled,
                                   event_loop=urwid.GLibEventLoop(),
                                   handle_mouse=True)
        self.start_progress()
        self.loop.run()


def RGB(clr):
    if len(clr) == 3:
        return clr
    elif len(clr) > 3:
        return clr[0:3]
    else:
        return clr[0], clr[0], clr[0]


def hexrgb(rgb):
    "given (r, g, b) returns '#xxx'"
    return '#%x%x%x' % (rgb[0]/16, rgb[1]/16, rgb[2]/16)


def cleanurl(url):
    if url.startswith('file://'):
        return os.path.basename(url[7:])
    return url


def main():
    try:
        log.info("--- starting ---")
        client = Client()
        client.connect()

        xui = Xui(client)
        xui.display()
    except XmmsError, e:
        print >> sys.stderr, "Error: %s" % (e)
        sys.exit(1)

if __name__ == "__main__":
    main()
